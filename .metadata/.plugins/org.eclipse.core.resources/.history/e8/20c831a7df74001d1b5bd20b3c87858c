package com.roomservice.service;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.roomservice.repository.RoomRepository;

@Service
public class RoomServiceImplementation implements RoomService{
	
	@Autowired
	private RoomRepository roomRepository;

	Logger log = LoggerFactory.getLogger(RoomServiceImplementation.class);
	
	@Override
	public List<Room> showAllRoom() {
		log.info("Show All Room Method Started");
		List<Room> room = roomRepository.findAll();
		log.debug("The Rooms are{}",room);
		log.info("Show All Room Method Ended");
		return room;
	}

	@Override
	public Room showRoomById(int id) throws RoomNotFoundException {
		log.info("Show Room By Id Method Started");
		return roomRepository.findById(id)
				.orElseThrow(()-> new RoomNotFoundException("Room with the id "+id+ "Doesn't Exists"));
	}

	@Override
	public Room addRoomDetails(Room room) throws RoomNotFoundException{
		log.info("Add Room Method Started");
		Optional<Room> rm = roomRepository.findById(room.getid());
		if (!rm.isPresent()) {
			log.info("Add Room Method Ended");
			return roomRepository.insert(room);
		} else {
			return room.orElseThrow(() -> new RoomNotFoundException("Dealer Already Exists"));
		}
	}

	@Override
	public Room updateRoomDetails(Room room)throws RoomNotFoundException {
		log.info("Update Room Method Started");
		Optional<Room> rm = roomRepository.findById(room.getid());
		if(!room.isPresent())
			return rm.orElseThrow(
					()-> new RoomNotFoundException("Room with the id " + room.getDetails.getid()+" Doesn't Exists"));
		log.info("Update Room Method Ended");
		return roomRepository.save(room);
	}

	@Override
	public void deleteRoomDetails(int id)throws RoomNotFoundException {
		log.info("Delete Room Details Method Started");
		Optional<Room> room = roomRepository.findById(id);
		if (!room.isPresent()) {
			room.orElseThrow(() -> new RoomNotFoundException("Room with the id " + id + " Doesn't Exists"));
		} else {
			roomRepository.deleteById(id);
			log.debug("Deleted SuccessFully {}", room);
			log.info("Delete Room Method Ended");
		}
		return "Room with the " + id + " Deleted Successfully!";
	}
	}
