package com.reservation;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

import java.text.ParseException;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;

import com.reservation.exception.ReservationNotFoundException;
import com.reservation.model.Reservation;
import com.reservation.repository.ReservationRepository;
import com.reservation.service.ReservationService;

@SpringBootTest
class ReservationServiceApplicationTests {

	@Autowired
	private ReservationService reservationService;

	@MockBean
	private ReservationRepository rep;

	@Test
	public void getReservationTest() throws ReservationNotFoundException, ParseException {

		when(rep.findAll()).thenReturn(Stream
				.of(new Reservation(152, 2, 2, "12/12/22", "15/12/22", 3, "Gomathi", "gomathi@gmail.com",
						"9874561235", "F", "Nehru nagar", true),
						new Reservation(133, 3, 0, "10/12/22", "12/12/22", 2, "Vasavi", "vas@gmail.com",
								"98728561235", "F", "Gandhi nagar", true))
				.collect(Collectors.toList()));
		assertEquals(2, reservationService.showAllReservationDetails().size());
	}

	@Test
	public void addReservationTest() throws ReservationNotFoundException {

		Reservation reservation = new Reservation(120, 2, 2, "03/12/22", "06/12/22", 3, "Ravi", "ravi@gmail.com",
				"9874561235", "M", "Kamban Street", true);
		when(rep.insert(reservation)).thenReturn(reservation);
		assertEquals(reservation, reservationService.addReservation(reservation));
	}

	@Test
	public void updateReservationTest() throws ReservationNotFoundException {

		Reservation reservation = new Reservation(166, 3, 1, "04/12/22", "08/12/22", 4, "Akash", "akash@gmail.com",
				"8774561235", "M", "Gangai nagar", true);
		when(rep.save(reservation)).thenReturn(reservation);
		assertEquals(reservation, reservationService.updateReservation(reservation));
	}


}
