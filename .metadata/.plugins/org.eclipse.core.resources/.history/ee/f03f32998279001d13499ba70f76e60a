package com.reservation;

import static org.junit.jupiter.api.Assertions.assertEquals;

import static org.mockito.Mockito.when;

import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;

import com.reservation.exception.ReservationNotFoundException;
import com.reservation.model.Reservation;
import com.reservation.repository.ReservationRepository;
import com.reservation.service.ReservationService;

@SpringBootTest
class ReservationServiceApplicationTests {

	@Autowired
	private ReservationService service;

	@MockBean
	private ReservationRepository reservationRepository;
	
	@Test
	public void ShowAllRoomTest() throws ReservationNotFoundException {
		List<Reservation>room = new ArrayList<>();
		Reservation r = new Reservation();
		
		r.setRoomNumber(1);
		r.setRoomStatus(true);
		r.setTotalRooms(100);

		room.add(r);

		when(reservationRepository.findAll()).thenReturn(room);
		assertEquals(1, service.showAllReservationDetails().size());
	}
	
	@Test
	public void ShowRoomByIdTest() throws ReservationNotFoundException {
		
		Reservation r = new Reservation();
		
		r.setRoomNumber(1);
		r.setRoomStatus(true);
		r.setTotalRooms(100);
		
	       Optional<Reservation> room = Optional.of(r);
	       
	       when(reservationRepository.findById(1)).thenReturn(room);
	        assertEquals(r, service.showReservationById(1));
	    }
	
	@Test
	public void addRoomTest() throws ReservationNotFoundException {
             
		Reservation r = new Reservation();
		
		r.setRoomNumber(1);
		r.setRoomStatus(true);
		r.setTotalRooms(100);
		
		when(reservationRepository.insert(r)).thenReturn(r);
		assertEquals(r, service.addReservation(r));
		
	}
	
	@Test
	public void updateRoomTest() throws ReservationNotFoundException {
        
		Reservation r1 = new Reservation();
		Reservation r2 = new Reservation();
		
		r1.setRoomNumber(1);
		r1.setRoomStatus(true);
		r1.setTotalRooms(100);

		r2.setRoomNumber(1);
		r2.setRoomStatus(false);
		r2.setTotalRooms(100);
		
	       Optional<Reservation> room = Optional.of(r1);
	       
	       when(reservationRepository.findById(1)).thenReturn(room);
	        when(reservationRepository.save(r2)).thenReturn(r2);
	        assertEquals(r2, service.updateReservation(r2));
	    }
	
	@Test
	public void deleteReservationTest() throws ReservationNotFoundException {
        
		Reservation r = new Reservation();
		
		r.setRoomNumber(1);
		r.setRoomStatus(true);
		r.setTotalRooms(100);
		
        Optional<Reservation> room = Optional.of(r);
        when(reservationRepository.findById(1)).thenReturn(room);
        assertEquals("Room with the 1 Deleted Successfully!", service.deleteReservation(1));
    }
	

	
	
}
